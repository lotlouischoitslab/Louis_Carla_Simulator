// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uiprimitives.proto

#include "xviz/proto/uiprimitives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_uiprimitives_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TreeTableColumn_uiprimitives_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_uiprimitives_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TreeTableNode_uiprimitives_2eproto;
namespace xviz {
class TreeTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TreeTable> _instance;
} _TreeTable_default_instance_;
class TreeTableColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TreeTableColumn> _instance;
} _TreeTableColumn_default_instance_;
class TreeTableNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TreeTableNode> _instance;
} _TreeTableNode_default_instance_;
}  // namespace xviz
static void InitDefaultsscc_info_TreeTable_uiprimitives_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_TreeTable_default_instance_;
    new (ptr) ::xviz::TreeTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::TreeTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TreeTable_uiprimitives_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TreeTable_uiprimitives_2eproto}, {
      &scc_info_TreeTableColumn_uiprimitives_2eproto.base,
      &scc_info_TreeTableNode_uiprimitives_2eproto.base,}};

static void InitDefaultsscc_info_TreeTableColumn_uiprimitives_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_TreeTableColumn_default_instance_;
    new (ptr) ::xviz::TreeTableColumn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::TreeTableColumn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TreeTableColumn_uiprimitives_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TreeTableColumn_uiprimitives_2eproto}, {}};

static void InitDefaultsscc_info_TreeTableNode_uiprimitives_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_TreeTableNode_default_instance_;
    new (ptr) ::xviz::TreeTableNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::TreeTableNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TreeTableNode_uiprimitives_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TreeTableNode_uiprimitives_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_uiprimitives_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_uiprimitives_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_uiprimitives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_uiprimitives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::TreeTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::TreeTable, columns_),
  PROTOBUF_FIELD_OFFSET(::xviz::TreeTable, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::TreeTableColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::TreeTableColumn, display_text_),
  PROTOBUF_FIELD_OFFSET(::xviz::TreeTableColumn, type_),
  PROTOBUF_FIELD_OFFSET(::xviz::TreeTableColumn, unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::TreeTableNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::TreeTableNode, id_),
  PROTOBUF_FIELD_OFFSET(::xviz::TreeTableNode, parent_),
  PROTOBUF_FIELD_OFFSET(::xviz::TreeTableNode, column_values_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xviz::TreeTable)},
  { 7, -1, sizeof(::xviz::TreeTableColumn)},
  { 15, -1, sizeof(::xviz::TreeTableNode)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_TreeTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_TreeTableColumn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_TreeTableNode_default_instance_),
};

const char descriptor_table_protodef_uiprimitives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022uiprimitives.proto\022\004xviz\032\roptions.prot"
  "o\"t\n\tTreeTable\022&\n\007columns\030\001 \003(\0132\025.xviz.T"
  "reeTableColumn\022\"\n\005nodes\030\002 \003(\0132\023.xviz.Tre"
  "eTableNode:\033\302\273\032\027ui-primitives/treetable\""
  "\316\001\n\017TreeTableColumn\022\024\n\014display_text\030\001 \001("
  "\t\022.\n\004type\030\002 \001(\0162 .xviz.TreeTableColumn.C"
  "olumnType\022\014\n\004unit\030\003 \001(\t\"g\n\nColumnType\022)\n"
  "%TREE_TABLE_COLUMN_COLUMN_TYPE_INVALID\020\000"
  "\022\t\n\005INT32\020\001\022\n\n\006DOUBLE\020\002\022\n\n\006STRING\020\003\022\013\n\007B"
  "OOLEAN\020\004\"B\n\rTreeTableNode\022\n\n\002id\030\001 \001(\005\022\016\n"
  "\006parent\030\002 \001(\005\022\025\n\rcolumn_values\030\003 \003(\tB9\n\013"
  "com.xviz.v2B\021UiprimitivesProtoP\001Z\004v2pb\242\002"
  "\004XVIZ\252\002\007xviz.V2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_uiprimitives_2eproto_deps[1] = {
  &::descriptor_table_options_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_uiprimitives_2eproto_sccs[3] = {
  &scc_info_TreeTable_uiprimitives_2eproto.base,
  &scc_info_TreeTableColumn_uiprimitives_2eproto.base,
  &scc_info_TreeTableNode_uiprimitives_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_uiprimitives_2eproto_once;
static bool descriptor_table_uiprimitives_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uiprimitives_2eproto = {
  &descriptor_table_uiprimitives_2eproto_initialized, descriptor_table_protodef_uiprimitives_2eproto, "uiprimitives.proto", 503,
  &descriptor_table_uiprimitives_2eproto_once, descriptor_table_uiprimitives_2eproto_sccs, descriptor_table_uiprimitives_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_uiprimitives_2eproto::offsets,
  file_level_metadata_uiprimitives_2eproto, 3, file_level_enum_descriptors_uiprimitives_2eproto, file_level_service_descriptors_uiprimitives_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_uiprimitives_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_uiprimitives_2eproto), true);
namespace xviz {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TreeTableColumn_ColumnType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uiprimitives_2eproto);
  return file_level_enum_descriptors_uiprimitives_2eproto[0];
}
bool TreeTableColumn_ColumnType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TreeTableColumn_ColumnType TreeTableColumn::TREE_TABLE_COLUMN_COLUMN_TYPE_INVALID;
constexpr TreeTableColumn_ColumnType TreeTableColumn::INT32;
constexpr TreeTableColumn_ColumnType TreeTableColumn::DOUBLE;
constexpr TreeTableColumn_ColumnType TreeTableColumn::STRING;
constexpr TreeTableColumn_ColumnType TreeTableColumn::BOOLEAN;
constexpr TreeTableColumn_ColumnType TreeTableColumn::ColumnType_MIN;
constexpr TreeTableColumn_ColumnType TreeTableColumn::ColumnType_MAX;
constexpr int TreeTableColumn::ColumnType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TreeTable::InitAsDefaultInstance() {
}
class TreeTable::_Internal {
 public:
};

TreeTable::TreeTable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.TreeTable)
}
TreeTable::TreeTable(const TreeTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      columns_(from.columns_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xviz.TreeTable)
}

void TreeTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TreeTable_uiprimitives_2eproto.base);
}

TreeTable::~TreeTable() {
  // @@protoc_insertion_point(destructor:xviz.TreeTable)
  SharedDtor();
}

void TreeTable::SharedDtor() {
}

void TreeTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TreeTable& TreeTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TreeTable_uiprimitives_2eproto.base);
  return *internal_default_instance();
}


void TreeTable::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TreeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  nodes_.Clear();
  _internal_metadata_.Clear();
}

const char* TreeTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .xviz.TreeTableColumn columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .xviz.TreeTableNode nodes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TreeTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TreeTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xviz.TreeTableColumn columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_columns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_columns(i), target, stream);
  }

  // repeated .xviz.TreeTableNode nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.TreeTable)
  return target;
}

size_t TreeTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TreeTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xviz.TreeTableColumn columns = 1;
  total_size += 1UL * this->_internal_columns_size();
  for (const auto& msg : this->columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .xviz.TreeTableNode nodes = 2;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.TreeTable)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TreeTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.TreeTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.TreeTable)
    MergeFrom(*source);
  }
}

void TreeTable::MergeFrom(const TreeTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TreeTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  nodes_.MergeFrom(from.nodes_);
}

void TreeTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.TreeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeTable::CopyFrom(const TreeTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TreeTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeTable::IsInitialized() const {
  return true;
}

void TreeTable::InternalSwap(TreeTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  columns_.InternalSwap(&other->columns_);
  nodes_.InternalSwap(&other->nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TreeTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TreeTableColumn::InitAsDefaultInstance() {
}
class TreeTableColumn::_Internal {
 public:
};

TreeTableColumn::TreeTableColumn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.TreeTableColumn)
}
TreeTableColumn::TreeTableColumn(const TreeTableColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  display_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display_text().empty()) {
    display_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_text_);
  }
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unit().empty()) {
    unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:xviz.TreeTableColumn)
}

void TreeTableColumn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TreeTableColumn_uiprimitives_2eproto.base);
  display_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

TreeTableColumn::~TreeTableColumn() {
  // @@protoc_insertion_point(destructor:xviz.TreeTableColumn)
  SharedDtor();
}

void TreeTableColumn::SharedDtor() {
  display_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TreeTableColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TreeTableColumn& TreeTableColumn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TreeTableColumn_uiprimitives_2eproto.base);
  return *internal_default_instance();
}


void TreeTableColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TreeTableColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* TreeTableColumn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string display_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_display_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.TreeTableColumn.display_text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xviz.TreeTableColumn.ColumnType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::xviz::TreeTableColumn_ColumnType>(val));
        } else goto handle_unusual;
        continue;
      // string unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.TreeTableColumn.unit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TreeTableColumn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TreeTableColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_text = 1;
  if (this->display_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_text().data(), static_cast<int>(this->_internal_display_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.TreeTableColumn.display_text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_display_text(), target);
  }

  // .xviz.TreeTableColumn.ColumnType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.TreeTableColumn.unit");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.TreeTableColumn)
  return target;
}

size_t TreeTableColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TreeTableColumn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string display_text = 1;
  if (this->display_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_text());
  }

  // string unit = 3;
  if (this->unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit());
  }

  // .xviz.TreeTableColumn.ColumnType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeTableColumn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.TreeTableColumn)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeTableColumn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TreeTableColumn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.TreeTableColumn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.TreeTableColumn)
    MergeFrom(*source);
  }
}

void TreeTableColumn::MergeFrom(const TreeTableColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TreeTableColumn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.display_text().size() > 0) {

    display_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_text_);
  }
  if (from.unit().size() > 0) {

    unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unit_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void TreeTableColumn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.TreeTableColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeTableColumn::CopyFrom(const TreeTableColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TreeTableColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeTableColumn::IsInitialized() const {
  return true;
}

void TreeTableColumn::InternalSwap(TreeTableColumn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  display_text_.Swap(&other->display_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TreeTableColumn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TreeTableNode::InitAsDefaultInstance() {
}
class TreeTableNode::_Internal {
 public:
};

TreeTableNode::TreeTableNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.TreeTableNode)
}
TreeTableNode::TreeTableNode(const TreeTableNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      column_values_(from.column_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_) -
    reinterpret_cast<char*>(&id_)) + sizeof(parent_));
  // @@protoc_insertion_point(copy_constructor:xviz.TreeTableNode)
}

void TreeTableNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TreeTableNode_uiprimitives_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(parent_));
}

TreeTableNode::~TreeTableNode() {
  // @@protoc_insertion_point(destructor:xviz.TreeTableNode)
  SharedDtor();
}

void TreeTableNode::SharedDtor() {
}

void TreeTableNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TreeTableNode& TreeTableNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TreeTableNode_uiprimitives_2eproto.base);
  return *internal_default_instance();
}


void TreeTableNode::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.TreeTableNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_values_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(parent_));
  _internal_metadata_.Clear();
}

const char* TreeTableNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string column_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.TreeTableNode.column_values"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TreeTableNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.TreeTableNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 parent = 2;
  if (this->parent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_parent(), target);
  }

  // repeated string column_values = 3;
  for (int i = 0, n = this->_internal_column_values_size(); i < n; i++) {
    const auto& s = this->_internal_column_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.TreeTableNode.column_values");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.TreeTableNode)
  return target;
}

size_t TreeTableNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.TreeTableNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_values = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_values_.size());
  for (int i = 0, n = column_values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_values_.Get(i));
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 parent = 2;
  if (this->parent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TreeTableNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.TreeTableNode)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeTableNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TreeTableNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.TreeTableNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.TreeTableNode)
    MergeFrom(*source);
  }
}

void TreeTableNode::MergeFrom(const TreeTableNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.TreeTableNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_values_.MergeFrom(from.column_values_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.parent() != 0) {
    _internal_set_parent(from._internal_parent());
  }
}

void TreeTableNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.TreeTableNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeTableNode::CopyFrom(const TreeTableNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.TreeTableNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeTableNode::IsInitialized() const {
  return true;
}

void TreeTableNode::InternalSwap(TreeTableNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  column_values_.InternalSwap(&other->column_values_);
  swap(id_, other->id_);
  swap(parent_, other->parent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TreeTableNode::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xviz
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xviz::TreeTable* Arena::CreateMaybeMessage< ::xviz::TreeTable >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::TreeTable >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::TreeTableColumn* Arena::CreateMaybeMessage< ::xviz::TreeTableColumn >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::TreeTableColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::TreeTableNode* Arena::CreateMaybeMessage< ::xviz::TreeTableNode >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::TreeTableNode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

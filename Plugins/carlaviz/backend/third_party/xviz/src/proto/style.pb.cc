// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: style.proto

#include "xviz/proto/style.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_style_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StyleObjectValue_style_2eproto;
namespace xviz {
class StyleClassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StyleClass> _instance;
} _StyleClass_default_instance_;
class StyleObjectValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StyleObjectValue> _instance;
} _StyleObjectValue_default_instance_;
class StyleStreamValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StyleStreamValue> _instance;
} _StyleStreamValue_default_instance_;
class ColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Color> _instance;
} _Color_default_instance_;
}  // namespace xviz
static void InitDefaultsscc_info_Color_style_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_Color_default_instance_;
    new (ptr) ::xviz::Color();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::Color::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_style_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Color_style_2eproto}, {}};

static void InitDefaultsscc_info_StyleClass_style_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_StyleClass_default_instance_;
    new (ptr) ::xviz::StyleClass();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::StyleClass::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StyleClass_style_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StyleClass_style_2eproto}, {
      &scc_info_StyleObjectValue_style_2eproto.base,}};

static void InitDefaultsscc_info_StyleObjectValue_style_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_StyleObjectValue_default_instance_;
    new (ptr) ::xviz::StyleObjectValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::StyleObjectValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StyleObjectValue_style_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StyleObjectValue_style_2eproto}, {}};

static void InitDefaultsscc_info_StyleStreamValue_style_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xviz::_StyleStreamValue_default_instance_;
    new (ptr) ::xviz::StyleStreamValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xviz::StyleStreamValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StyleStreamValue_style_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StyleStreamValue_style_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_style_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_style_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_style_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_style_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::StyleClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::StyleClass, name_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleClass, style_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, fill_color_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, stroke_color_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, stroke_width_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, radius_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, text_size_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, text_rotation_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, text_anchor_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, text_baseline_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleObjectValue, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, fill_color_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, stroke_color_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, stroke_width_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, radius_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, text_size_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, text_rotation_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, text_anchor_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, text_baseline_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, height_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, radius_min_pixels_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, radius_max_pixels_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, stroke_width_min_pixels_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, stroke_width_max_pixels_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, opacity_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, stroked_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, filled_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, extruded_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, radius_pixels_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, font_weight_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, font_family_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, point_color_mode_),
  PROTOBUF_FIELD_OFFSET(::xviz::StyleStreamValue, point_color_domain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xviz::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xviz::Color, values_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xviz::StyleClass)},
  { 7, -1, sizeof(::xviz::StyleObjectValue)},
  { 21, -1, sizeof(::xviz::StyleStreamValue)},
  { 48, -1, sizeof(::xviz::Color)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StyleClass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StyleObjectValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_StyleStreamValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xviz::_Color_default_instance_),
};

const char descriptor_table_protodef_style_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013style.proto\022\004xviz\032\roptions.proto\"R\n\nSt"
  "yleClass\022\014\n\004name\030\001 \001(\t\022%\n\005style\030\002 \001(\0132\026."
  "xviz.StyleObjectValue:\017\302\273\032\013style/class\"\217"
  "\002\n\020StyleObjectValue\022\022\n\nfill_color\030\001 \001(\t\022"
  "\024\n\014stroke_color\030\002 \001(\t\022\024\n\014stroke_width\030\003 "
  "\001(\002\022\016\n\006radius\030\004 \001(\002\022\021\n\ttext_size\030\005 \001(\002\022\025"
  "\n\rtext_rotation\030\006 \001(\002\022%\n\013text_anchor\030\007 \001"
  "(\0162\020.xviz.TextAnchor\0222\n\rtext_baseline\030\010 "
  "\001(\0162\033.xviz.TextAlignmentBaseline\022\016\n\006heig"
  "ht\030\t \001(\002:\026\302\273\032\022style/object_value\"\330\004\n\020Sty"
  "leStreamValue\022\022\n\nfill_color\030\001 \001(\t\022\024\n\014str"
  "oke_color\030\002 \001(\t\022\024\n\014stroke_width\030\003 \001(\002\022\016\n"
  "\006radius\030\004 \001(\002\022\021\n\ttext_size\030\005 \001(\002\022\025\n\rtext"
  "_rotation\030\006 \001(\002\022%\n\013text_anchor\030\007 \001(\0162\020.x"
  "viz.TextAnchor\0222\n\rtext_baseline\030\010 \001(\0162\033."
  "xviz.TextAlignmentBaseline\022\016\n\006height\030\t \001"
  "(\002\022\031\n\021radius_min_pixels\030\n \001(\r\022\031\n\021radius_"
  "max_pixels\030\013 \001(\r\022\037\n\027stroke_width_min_pix"
  "els\030\014 \001(\r\022\037\n\027stroke_width_max_pixels\030\r \001"
  "(\r\022\017\n\007opacity\030\016 \001(\002\022\017\n\007stroked\030\017 \001(\010\022\016\n\006"
  "filled\030\020 \001(\010\022\020\n\010extruded\030\021 \001(\010\022\025\n\rradius"
  "_pixels\030\022 \001(\r\022\023\n\013font_weight\030\023 \001(\r\022\023\n\013fo"
  "nt_family\030\024 \001(\t\022.\n\020point_color_mode\030\025 \001("
  "\0162\024.xviz.PointColorMode\022\032\n\022point_color_d"
  "omain\030\026 \003(\002:\026\302\273\032\022style/stream_value\"\027\n\005C"
  "olor\022\016\n\006values\030\001 \001(\014*E\n\nTextAnchor\022\027\n\023TE"
  "XT_ANCHOR_INVALID\020\000\022\t\n\005START\020\001\022\n\n\006MIDDLE"
  "\020\002\022\007\n\003END\020\003*]\n\025TextAlignmentBaseline\022#\n\037"
  "TEXT_ALIGNMENT_BASELINE_INVALID\020\000\022\007\n\003TOP"
  "\020\001\022\n\n\006CENTER\020\002\022\n\n\006BOTTOM\020\003*V\n\016PointColor"
  "Mode\022\034\n\030POINT_COLOR_MODE_INVALID\020\000\022\r\n\tEL"
  "EVATION\020\001\022\027\n\023DISTANCE_TO_VEHICLE\020\002B2\n\013co"
  "m.xviz.v2B\nStyleProtoP\001Z\004v2pb\242\002\004XVIZ\252\002\007x"
  "viz.V2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_style_2eproto_deps[1] = {
  &::descriptor_table_options_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_style_2eproto_sccs[4] = {
  &scc_info_Color_style_2eproto.base,
  &scc_info_StyleClass_style_2eproto.base,
  &scc_info_StyleObjectValue_style_2eproto.base,
  &scc_info_StyleStreamValue_style_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_style_2eproto_once;
static bool descriptor_table_style_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_style_2eproto = {
  &descriptor_table_style_2eproto_initialized, descriptor_table_protodef_style_2eproto, "style.proto", 1334,
  &descriptor_table_style_2eproto_once, descriptor_table_style_2eproto_sccs, descriptor_table_style_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_style_2eproto::offsets,
  file_level_metadata_style_2eproto, 4, file_level_enum_descriptors_style_2eproto, file_level_service_descriptors_style_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_style_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_style_2eproto), true);
namespace xviz {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextAnchor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_style_2eproto);
  return file_level_enum_descriptors_style_2eproto[0];
}
bool TextAnchor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextAlignmentBaseline_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_style_2eproto);
  return file_level_enum_descriptors_style_2eproto[1];
}
bool TextAlignmentBaseline_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PointColorMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_style_2eproto);
  return file_level_enum_descriptors_style_2eproto[2];
}
bool PointColorMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StyleClass::InitAsDefaultInstance() {
  ::xviz::_StyleClass_default_instance_._instance.get_mutable()->style_ = const_cast< ::xviz::StyleObjectValue*>(
      ::xviz::StyleObjectValue::internal_default_instance());
}
class StyleClass::_Internal {
 public:
  static const ::xviz::StyleObjectValue& style(const StyleClass* msg);
};

const ::xviz::StyleObjectValue&
StyleClass::_Internal::style(const StyleClass* msg) {
  return *msg->style_;
}
StyleClass::StyleClass()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.StyleClass)
}
StyleClass::StyleClass(const StyleClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_style()) {
    style_ = new ::xviz::StyleObjectValue(*from.style_);
  } else {
    style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:xviz.StyleClass)
}

void StyleClass::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StyleClass_style_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  style_ = nullptr;
}

StyleClass::~StyleClass() {
  // @@protoc_insertion_point(destructor:xviz.StyleClass)
  SharedDtor();
}

void StyleClass::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete style_;
}

void StyleClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StyleClass& StyleClass::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StyleClass_style_2eproto.base);
  return *internal_default_instance();
}


void StyleClass::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StyleClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StyleClass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.StyleClass.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xviz.StyleObjectValue style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleClass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StyleClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.StyleClass.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .xviz.StyleObjectValue style = 2;
  if (this->has_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::style(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.StyleClass)
  return target;
}

size_t StyleClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StyleClass)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .xviz.StyleObjectValue style = 2;
  if (this->has_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleClass::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.StyleClass)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleClass* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleClass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.StyleClass)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.StyleClass)
    MergeFrom(*source);
  }
}

void StyleClass::MergeFrom(const StyleClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StyleClass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_style()) {
    _internal_mutable_style()->::xviz::StyleObjectValue::MergeFrom(from._internal_style());
  }
}

void StyleClass::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.StyleClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleClass::CopyFrom(const StyleClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StyleClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleClass::IsInitialized() const {
  return true;
}

void StyleClass::InternalSwap(StyleClass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(style_, other->style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleClass::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StyleObjectValue::InitAsDefaultInstance() {
}
class StyleObjectValue::_Internal {
 public:
};

StyleObjectValue::StyleObjectValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.StyleObjectValue)
}
StyleObjectValue::StyleObjectValue(const StyleObjectValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fill_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fill_color().empty()) {
    fill_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fill_color_);
  }
  stroke_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stroke_color().empty()) {
    stroke_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stroke_color_);
  }
  ::memcpy(&stroke_width_, &from.stroke_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&stroke_width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:xviz.StyleObjectValue)
}

void StyleObjectValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StyleObjectValue_style_2eproto.base);
  fill_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stroke_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stroke_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&stroke_width_)) + sizeof(height_));
}

StyleObjectValue::~StyleObjectValue() {
  // @@protoc_insertion_point(destructor:xviz.StyleObjectValue)
  SharedDtor();
}

void StyleObjectValue::SharedDtor() {
  fill_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stroke_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StyleObjectValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StyleObjectValue& StyleObjectValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StyleObjectValue_style_2eproto.base);
  return *internal_default_instance();
}


void StyleObjectValue::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StyleObjectValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fill_color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stroke_color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stroke_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&stroke_width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

const char* StyleObjectValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fill_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fill_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.StyleObjectValue.fill_color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stroke_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stroke_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.StyleObjectValue.stroke_color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float stroke_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          stroke_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float radius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float text_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          text_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float text_rotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          text_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .xviz.TextAnchor text_anchor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_text_anchor(static_cast<::xviz::TextAnchor>(val));
        } else goto handle_unusual;
        continue;
      // .xviz.TextAlignmentBaseline text_baseline = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_text_baseline(static_cast<::xviz::TextAlignmentBaseline>(val));
        } else goto handle_unusual;
        continue;
      // float height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleObjectValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StyleObjectValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fill_color = 1;
  if (this->fill_color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fill_color().data(), static_cast<int>(this->_internal_fill_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.StyleObjectValue.fill_color");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fill_color(), target);
  }

  // string stroke_color = 2;
  if (this->stroke_color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stroke_color().data(), static_cast<int>(this->_internal_stroke_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.StyleObjectValue.stroke_color");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stroke_color(), target);
  }

  // float stroke_width = 3;
  if (!(this->stroke_width() <= 0 && this->stroke_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_stroke_width(), target);
  }

  // float radius = 4;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_radius(), target);
  }

  // float text_size = 5;
  if (!(this->text_size() <= 0 && this->text_size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_text_size(), target);
  }

  // float text_rotation = 6;
  if (!(this->text_rotation() <= 0 && this->text_rotation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_text_rotation(), target);
  }

  // .xviz.TextAnchor text_anchor = 7;
  if (this->text_anchor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_text_anchor(), target);
  }

  // .xviz.TextAlignmentBaseline text_baseline = 8;
  if (this->text_baseline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_text_baseline(), target);
  }

  // float height = 9;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.StyleObjectValue)
  return target;
}

size_t StyleObjectValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StyleObjectValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fill_color = 1;
  if (this->fill_color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fill_color());
  }

  // string stroke_color = 2;
  if (this->stroke_color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stroke_color());
  }

  // float stroke_width = 3;
  if (!(this->stroke_width() <= 0 && this->stroke_width() >= 0)) {
    total_size += 1 + 4;
  }

  // float radius = 4;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 4;
  }

  // float text_size = 5;
  if (!(this->text_size() <= 0 && this->text_size() >= 0)) {
    total_size += 1 + 4;
  }

  // float text_rotation = 6;
  if (!(this->text_rotation() <= 0 && this->text_rotation() >= 0)) {
    total_size += 1 + 4;
  }

  // .xviz.TextAnchor text_anchor = 7;
  if (this->text_anchor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_text_anchor());
  }

  // .xviz.TextAlignmentBaseline text_baseline = 8;
  if (this->text_baseline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_text_baseline());
  }

  // float height = 9;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleObjectValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.StyleObjectValue)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleObjectValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleObjectValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.StyleObjectValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.StyleObjectValue)
    MergeFrom(*source);
  }
}

void StyleObjectValue::MergeFrom(const StyleObjectValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StyleObjectValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fill_color().size() > 0) {

    fill_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fill_color_);
  }
  if (from.stroke_color().size() > 0) {

    stroke_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stroke_color_);
  }
  if (!(from.stroke_width() <= 0 && from.stroke_width() >= 0)) {
    _internal_set_stroke_width(from._internal_stroke_width());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
  if (!(from.text_size() <= 0 && from.text_size() >= 0)) {
    _internal_set_text_size(from._internal_text_size());
  }
  if (!(from.text_rotation() <= 0 && from.text_rotation() >= 0)) {
    _internal_set_text_rotation(from._internal_text_rotation());
  }
  if (from.text_anchor() != 0) {
    _internal_set_text_anchor(from._internal_text_anchor());
  }
  if (from.text_baseline() != 0) {
    _internal_set_text_baseline(from._internal_text_baseline());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
}

void StyleObjectValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.StyleObjectValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleObjectValue::CopyFrom(const StyleObjectValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StyleObjectValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleObjectValue::IsInitialized() const {
  return true;
}

void StyleObjectValue::InternalSwap(StyleObjectValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fill_color_.Swap(&other->fill_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stroke_color_.Swap(&other->stroke_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stroke_width_, other->stroke_width_);
  swap(radius_, other->radius_);
  swap(text_size_, other->text_size_);
  swap(text_rotation_, other->text_rotation_);
  swap(text_anchor_, other->text_anchor_);
  swap(text_baseline_, other->text_baseline_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleObjectValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StyleStreamValue::InitAsDefaultInstance() {
}
class StyleStreamValue::_Internal {
 public:
};

StyleStreamValue::StyleStreamValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.StyleStreamValue)
}
StyleStreamValue::StyleStreamValue(const StyleStreamValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      point_color_domain_(from.point_color_domain_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fill_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fill_color().empty()) {
    fill_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fill_color_);
  }
  stroke_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stroke_color().empty()) {
    stroke_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stroke_color_);
  }
  font_family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_font_family().empty()) {
    font_family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.font_family_);
  }
  ::memcpy(&stroke_width_, &from.stroke_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_color_mode_) -
    reinterpret_cast<char*>(&stroke_width_)) + sizeof(point_color_mode_));
  // @@protoc_insertion_point(copy_constructor:xviz.StyleStreamValue)
}

void StyleStreamValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StyleStreamValue_style_2eproto.base);
  fill_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stroke_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  font_family_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stroke_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_color_mode_) -
      reinterpret_cast<char*>(&stroke_width_)) + sizeof(point_color_mode_));
}

StyleStreamValue::~StyleStreamValue() {
  // @@protoc_insertion_point(destructor:xviz.StyleStreamValue)
  SharedDtor();
}

void StyleStreamValue::SharedDtor() {
  fill_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stroke_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  font_family_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StyleStreamValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StyleStreamValue& StyleStreamValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StyleStreamValue_style_2eproto.base);
  return *internal_default_instance();
}


void StyleStreamValue::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.StyleStreamValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_color_domain_.Clear();
  fill_color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stroke_color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  font_family_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&stroke_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_color_mode_) -
      reinterpret_cast<char*>(&stroke_width_)) + sizeof(point_color_mode_));
  _internal_metadata_.Clear();
}

const char* StyleStreamValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fill_color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fill_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.StyleStreamValue.fill_color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stroke_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_stroke_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.StyleStreamValue.stroke_color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float stroke_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          stroke_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float radius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float text_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          text_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float text_rotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          text_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .xviz.TextAnchor text_anchor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_text_anchor(static_cast<::xviz::TextAnchor>(val));
        } else goto handle_unusual;
        continue;
      // .xviz.TextAlignmentBaseline text_baseline = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_text_baseline(static_cast<::xviz::TextAlignmentBaseline>(val));
        } else goto handle_unusual;
        continue;
      // float height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 radius_min_pixels = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          radius_min_pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 radius_max_pixels = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          radius_max_pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stroke_width_min_pixels = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          stroke_width_min_pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stroke_width_max_pixels = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          stroke_width_max_pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float opacity = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool stroked = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          stroked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool filled = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          filled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool extruded = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          extruded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 radius_pixels = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          radius_pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 font_weight = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          font_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string font_family = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_font_family();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "xviz.StyleStreamValue.font_family"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .xviz.PointColorMode point_color_mode = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_point_color_mode(static_cast<::xviz::PointColorMode>(val));
        } else goto handle_unusual;
        continue;
      // repeated float point_color_domain = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_point_color_domain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181) {
          _internal_add_point_color_domain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StyleStreamValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.StyleStreamValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fill_color = 1;
  if (this->fill_color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fill_color().data(), static_cast<int>(this->_internal_fill_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.StyleStreamValue.fill_color");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fill_color(), target);
  }

  // string stroke_color = 2;
  if (this->stroke_color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stroke_color().data(), static_cast<int>(this->_internal_stroke_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.StyleStreamValue.stroke_color");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stroke_color(), target);
  }

  // float stroke_width = 3;
  if (!(this->stroke_width() <= 0 && this->stroke_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_stroke_width(), target);
  }

  // float radius = 4;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_radius(), target);
  }

  // float text_size = 5;
  if (!(this->text_size() <= 0 && this->text_size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_text_size(), target);
  }

  // float text_rotation = 6;
  if (!(this->text_rotation() <= 0 && this->text_rotation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_text_rotation(), target);
  }

  // .xviz.TextAnchor text_anchor = 7;
  if (this->text_anchor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_text_anchor(), target);
  }

  // .xviz.TextAlignmentBaseline text_baseline = 8;
  if (this->text_baseline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_text_baseline(), target);
  }

  // float height = 9;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_height(), target);
  }

  // uint32 radius_min_pixels = 10;
  if (this->radius_min_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_radius_min_pixels(), target);
  }

  // uint32 radius_max_pixels = 11;
  if (this->radius_max_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_radius_max_pixels(), target);
  }

  // uint32 stroke_width_min_pixels = 12;
  if (this->stroke_width_min_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_stroke_width_min_pixels(), target);
  }

  // uint32 stroke_width_max_pixels = 13;
  if (this->stroke_width_max_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_stroke_width_max_pixels(), target);
  }

  // float opacity = 14;
  if (!(this->opacity() <= 0 && this->opacity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_opacity(), target);
  }

  // bool stroked = 15;
  if (this->stroked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_stroked(), target);
  }

  // bool filled = 16;
  if (this->filled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_filled(), target);
  }

  // bool extruded = 17;
  if (this->extruded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_extruded(), target);
  }

  // uint32 radius_pixels = 18;
  if (this->radius_pixels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_radius_pixels(), target);
  }

  // uint32 font_weight = 19;
  if (this->font_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_font_weight(), target);
  }

  // string font_family = 20;
  if (this->font_family().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_font_family().data(), static_cast<int>(this->_internal_font_family().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xviz.StyleStreamValue.font_family");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_font_family(), target);
  }

  // .xviz.PointColorMode point_color_mode = 21;
  if (this->point_color_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_point_color_mode(), target);
  }

  // repeated float point_color_domain = 22;
  if (this->_internal_point_color_domain_size() > 0) {
    target = stream->WriteFixedPacked(22, _internal_point_color_domain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.StyleStreamValue)
  return target;
}

size_t StyleStreamValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.StyleStreamValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float point_color_domain = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_point_color_domain_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _point_color_domain_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string fill_color = 1;
  if (this->fill_color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fill_color());
  }

  // string stroke_color = 2;
  if (this->stroke_color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stroke_color());
  }

  // string font_family = 20;
  if (this->font_family().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font_family());
  }

  // float stroke_width = 3;
  if (!(this->stroke_width() <= 0 && this->stroke_width() >= 0)) {
    total_size += 1 + 4;
  }

  // float radius = 4;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 4;
  }

  // float text_size = 5;
  if (!(this->text_size() <= 0 && this->text_size() >= 0)) {
    total_size += 1 + 4;
  }

  // float text_rotation = 6;
  if (!(this->text_rotation() <= 0 && this->text_rotation() >= 0)) {
    total_size += 1 + 4;
  }

  // .xviz.TextAnchor text_anchor = 7;
  if (this->text_anchor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_text_anchor());
  }

  // .xviz.TextAlignmentBaseline text_baseline = 8;
  if (this->text_baseline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_text_baseline());
  }

  // float height = 9;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 radius_min_pixels = 10;
  if (this->radius_min_pixels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_radius_min_pixels());
  }

  // uint32 radius_max_pixels = 11;
  if (this->radius_max_pixels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_radius_max_pixels());
  }

  // uint32 stroke_width_min_pixels = 12;
  if (this->stroke_width_min_pixels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stroke_width_min_pixels());
  }

  // uint32 stroke_width_max_pixels = 13;
  if (this->stroke_width_max_pixels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stroke_width_max_pixels());
  }

  // float opacity = 14;
  if (!(this->opacity() <= 0 && this->opacity() >= 0)) {
    total_size += 1 + 4;
  }

  // bool stroked = 15;
  if (this->stroked() != 0) {
    total_size += 1 + 1;
  }

  // bool filled = 16;
  if (this->filled() != 0) {
    total_size += 2 + 1;
  }

  // bool extruded = 17;
  if (this->extruded() != 0) {
    total_size += 2 + 1;
  }

  // uint32 radius_pixels = 18;
  if (this->radius_pixels() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_radius_pixels());
  }

  // uint32 font_weight = 19;
  if (this->font_weight() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_font_weight());
  }

  // .xviz.PointColorMode point_color_mode = 21;
  if (this->point_color_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_point_color_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StyleStreamValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.StyleStreamValue)
  GOOGLE_DCHECK_NE(&from, this);
  const StyleStreamValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StyleStreamValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.StyleStreamValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.StyleStreamValue)
    MergeFrom(*source);
  }
}

void StyleStreamValue::MergeFrom(const StyleStreamValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.StyleStreamValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_color_domain_.MergeFrom(from.point_color_domain_);
  if (from.fill_color().size() > 0) {

    fill_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fill_color_);
  }
  if (from.stroke_color().size() > 0) {

    stroke_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stroke_color_);
  }
  if (from.font_family().size() > 0) {

    font_family_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.font_family_);
  }
  if (!(from.stroke_width() <= 0 && from.stroke_width() >= 0)) {
    _internal_set_stroke_width(from._internal_stroke_width());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
  if (!(from.text_size() <= 0 && from.text_size() >= 0)) {
    _internal_set_text_size(from._internal_text_size());
  }
  if (!(from.text_rotation() <= 0 && from.text_rotation() >= 0)) {
    _internal_set_text_rotation(from._internal_text_rotation());
  }
  if (from.text_anchor() != 0) {
    _internal_set_text_anchor(from._internal_text_anchor());
  }
  if (from.text_baseline() != 0) {
    _internal_set_text_baseline(from._internal_text_baseline());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (from.radius_min_pixels() != 0) {
    _internal_set_radius_min_pixels(from._internal_radius_min_pixels());
  }
  if (from.radius_max_pixels() != 0) {
    _internal_set_radius_max_pixels(from._internal_radius_max_pixels());
  }
  if (from.stroke_width_min_pixels() != 0) {
    _internal_set_stroke_width_min_pixels(from._internal_stroke_width_min_pixels());
  }
  if (from.stroke_width_max_pixels() != 0) {
    _internal_set_stroke_width_max_pixels(from._internal_stroke_width_max_pixels());
  }
  if (!(from.opacity() <= 0 && from.opacity() >= 0)) {
    _internal_set_opacity(from._internal_opacity());
  }
  if (from.stroked() != 0) {
    _internal_set_stroked(from._internal_stroked());
  }
  if (from.filled() != 0) {
    _internal_set_filled(from._internal_filled());
  }
  if (from.extruded() != 0) {
    _internal_set_extruded(from._internal_extruded());
  }
  if (from.radius_pixels() != 0) {
    _internal_set_radius_pixels(from._internal_radius_pixels());
  }
  if (from.font_weight() != 0) {
    _internal_set_font_weight(from._internal_font_weight());
  }
  if (from.point_color_mode() != 0) {
    _internal_set_point_color_mode(from._internal_point_color_mode());
  }
}

void StyleStreamValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.StyleStreamValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StyleStreamValue::CopyFrom(const StyleStreamValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.StyleStreamValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleStreamValue::IsInitialized() const {
  return true;
}

void StyleStreamValue::InternalSwap(StyleStreamValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  point_color_domain_.InternalSwap(&other->point_color_domain_);
  fill_color_.Swap(&other->fill_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stroke_color_.Swap(&other->stroke_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  font_family_.Swap(&other->font_family_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stroke_width_, other->stroke_width_);
  swap(radius_, other->radius_);
  swap(text_size_, other->text_size_);
  swap(text_rotation_, other->text_rotation_);
  swap(text_anchor_, other->text_anchor_);
  swap(text_baseline_, other->text_baseline_);
  swap(height_, other->height_);
  swap(radius_min_pixels_, other->radius_min_pixels_);
  swap(radius_max_pixels_, other->radius_max_pixels_);
  swap(stroke_width_min_pixels_, other->stroke_width_min_pixels_);
  swap(stroke_width_max_pixels_, other->stroke_width_max_pixels_);
  swap(opacity_, other->opacity_);
  swap(stroked_, other->stroked_);
  swap(filled_, other->filled_);
  swap(extruded_, other->extruded_);
  swap(radius_pixels_, other->radius_pixels_);
  swap(font_weight_, other->font_weight_);
  swap(point_color_mode_, other->point_color_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleStreamValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Color::InitAsDefaultInstance() {
}
class Color::_Internal {
 public:
};

Color::Color()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xviz.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_values().empty()) {
    values_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.values_);
  }
  // @@protoc_insertion_point(copy_constructor:xviz.Color)
}

void Color::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Color_style_2eproto.base);
  values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:xviz.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  values_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Color& Color::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Color_style_2eproto.base);
  return *internal_default_instance();
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:xviz.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_values();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xviz.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes values = 1;
  if (this->values().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xviz.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xviz.Color)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes values = 1;
  if (this->values().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_values());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xviz.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xviz.Color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xviz.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xviz.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.values().size() > 0) {

    values_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.values_);
  }
}

void Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xviz.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xviz.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.Swap(&other->values_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xviz
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xviz::StyleClass* Arena::CreateMaybeMessage< ::xviz::StyleClass >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::StyleClass >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::StyleObjectValue* Arena::CreateMaybeMessage< ::xviz::StyleObjectValue >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::StyleObjectValue >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::StyleStreamValue* Arena::CreateMaybeMessage< ::xviz::StyleStreamValue >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::StyleStreamValue >(arena);
}
template<> PROTOBUF_NOINLINE ::xviz::Color* Arena::CreateMaybeMessage< ::xviz::Color >(Arena* arena) {
  return Arena::CreateInternal< ::xviz::Color >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

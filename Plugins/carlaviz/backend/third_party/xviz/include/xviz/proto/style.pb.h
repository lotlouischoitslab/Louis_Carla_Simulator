// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: style.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_style_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_style_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_style_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_style_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_style_2eproto;
namespace xviz {
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class StyleClass;
class StyleClassDefaultTypeInternal;
extern StyleClassDefaultTypeInternal _StyleClass_default_instance_;
class StyleObjectValue;
class StyleObjectValueDefaultTypeInternal;
extern StyleObjectValueDefaultTypeInternal _StyleObjectValue_default_instance_;
class StyleStreamValue;
class StyleStreamValueDefaultTypeInternal;
extern StyleStreamValueDefaultTypeInternal _StyleStreamValue_default_instance_;
}  // namespace xviz
PROTOBUF_NAMESPACE_OPEN
template<> ::xviz::Color* Arena::CreateMaybeMessage<::xviz::Color>(Arena*);
template<> ::xviz::StyleClass* Arena::CreateMaybeMessage<::xviz::StyleClass>(Arena*);
template<> ::xviz::StyleObjectValue* Arena::CreateMaybeMessage<::xviz::StyleObjectValue>(Arena*);
template<> ::xviz::StyleStreamValue* Arena::CreateMaybeMessage<::xviz::StyleStreamValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xviz {

enum TextAnchor : int {
  TEXT_ANCHOR_INVALID = 0,
  START = 1,
  MIDDLE = 2,
  END = 3,
  TextAnchor_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TextAnchor_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TextAnchor_IsValid(int value);
constexpr TextAnchor TextAnchor_MIN = TEXT_ANCHOR_INVALID;
constexpr TextAnchor TextAnchor_MAX = END;
constexpr int TextAnchor_ARRAYSIZE = TextAnchor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextAnchor_descriptor();
template<typename T>
inline const std::string& TextAnchor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextAnchor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextAnchor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextAnchor_descriptor(), enum_t_value);
}
inline bool TextAnchor_Parse(
    const std::string& name, TextAnchor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextAnchor>(
    TextAnchor_descriptor(), name, value);
}
enum TextAlignmentBaseline : int {
  TEXT_ALIGNMENT_BASELINE_INVALID = 0,
  TOP = 1,
  CENTER = 2,
  BOTTOM = 3,
  TextAlignmentBaseline_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TextAlignmentBaseline_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TextAlignmentBaseline_IsValid(int value);
constexpr TextAlignmentBaseline TextAlignmentBaseline_MIN = TEXT_ALIGNMENT_BASELINE_INVALID;
constexpr TextAlignmentBaseline TextAlignmentBaseline_MAX = BOTTOM;
constexpr int TextAlignmentBaseline_ARRAYSIZE = TextAlignmentBaseline_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TextAlignmentBaseline_descriptor();
template<typename T>
inline const std::string& TextAlignmentBaseline_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextAlignmentBaseline>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextAlignmentBaseline_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TextAlignmentBaseline_descriptor(), enum_t_value);
}
inline bool TextAlignmentBaseline_Parse(
    const std::string& name, TextAlignmentBaseline* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TextAlignmentBaseline>(
    TextAlignmentBaseline_descriptor(), name, value);
}
enum PointColorMode : int {
  POINT_COLOR_MODE_INVALID = 0,
  ELEVATION = 1,
  DISTANCE_TO_VEHICLE = 2,
  PointColorMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PointColorMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PointColorMode_IsValid(int value);
constexpr PointColorMode PointColorMode_MIN = POINT_COLOR_MODE_INVALID;
constexpr PointColorMode PointColorMode_MAX = DISTANCE_TO_VEHICLE;
constexpr int PointColorMode_ARRAYSIZE = PointColorMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PointColorMode_descriptor();
template<typename T>
inline const std::string& PointColorMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PointColorMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PointColorMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PointColorMode_descriptor(), enum_t_value);
}
inline bool PointColorMode_Parse(
    const std::string& name, PointColorMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PointColorMode>(
    PointColorMode_descriptor(), name, value);
}
// ===================================================================

class StyleClass :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.StyleClass) */ {
 public:
  StyleClass();
  virtual ~StyleClass();

  StyleClass(const StyleClass& from);
  StyleClass(StyleClass&& from) noexcept
    : StyleClass() {
    *this = ::std::move(from);
  }

  inline StyleClass& operator=(const StyleClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleClass& operator=(StyleClass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StyleClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StyleClass* internal_default_instance() {
    return reinterpret_cast<const StyleClass*>(
               &_StyleClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StyleClass& a, StyleClass& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleClass* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleClass* New() const final {
    return CreateMaybeMessage<StyleClass>(nullptr);
  }

  StyleClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleClass>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StyleClass& from);
  void MergeFrom(const StyleClass& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleClass* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.StyleClass";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_style_2eproto);
    return ::descriptor_table_style_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStyleFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .xviz.StyleObjectValue style = 2;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::xviz::StyleObjectValue& style() const;
  ::xviz::StyleObjectValue* release_style();
  ::xviz::StyleObjectValue* mutable_style();
  void set_allocated_style(::xviz::StyleObjectValue* style);
  private:
  const ::xviz::StyleObjectValue& _internal_style() const;
  ::xviz::StyleObjectValue* _internal_mutable_style();
  public:

  // @@protoc_insertion_point(class_scope:xviz.StyleClass)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::xviz::StyleObjectValue* style_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_style_2eproto;
};
// -------------------------------------------------------------------

class StyleObjectValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.StyleObjectValue) */ {
 public:
  StyleObjectValue();
  virtual ~StyleObjectValue();

  StyleObjectValue(const StyleObjectValue& from);
  StyleObjectValue(StyleObjectValue&& from) noexcept
    : StyleObjectValue() {
    *this = ::std::move(from);
  }

  inline StyleObjectValue& operator=(const StyleObjectValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleObjectValue& operator=(StyleObjectValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StyleObjectValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StyleObjectValue* internal_default_instance() {
    return reinterpret_cast<const StyleObjectValue*>(
               &_StyleObjectValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StyleObjectValue& a, StyleObjectValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleObjectValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleObjectValue* New() const final {
    return CreateMaybeMessage<StyleObjectValue>(nullptr);
  }

  StyleObjectValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleObjectValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StyleObjectValue& from);
  void MergeFrom(const StyleObjectValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleObjectValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.StyleObjectValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_style_2eproto);
    return ::descriptor_table_style_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillColorFieldNumber = 1,
    kStrokeColorFieldNumber = 2,
    kStrokeWidthFieldNumber = 3,
    kRadiusFieldNumber = 4,
    kTextSizeFieldNumber = 5,
    kTextRotationFieldNumber = 6,
    kTextAnchorFieldNumber = 7,
    kTextBaselineFieldNumber = 8,
    kHeightFieldNumber = 9,
  };
  // string fill_color = 1;
  void clear_fill_color();
  const std::string& fill_color() const;
  void set_fill_color(const std::string& value);
  void set_fill_color(std::string&& value);
  void set_fill_color(const char* value);
  void set_fill_color(const char* value, size_t size);
  std::string* mutable_fill_color();
  std::string* release_fill_color();
  void set_allocated_fill_color(std::string* fill_color);
  private:
  const std::string& _internal_fill_color() const;
  void _internal_set_fill_color(const std::string& value);
  std::string* _internal_mutable_fill_color();
  public:

  // string stroke_color = 2;
  void clear_stroke_color();
  const std::string& stroke_color() const;
  void set_stroke_color(const std::string& value);
  void set_stroke_color(std::string&& value);
  void set_stroke_color(const char* value);
  void set_stroke_color(const char* value, size_t size);
  std::string* mutable_stroke_color();
  std::string* release_stroke_color();
  void set_allocated_stroke_color(std::string* stroke_color);
  private:
  const std::string& _internal_stroke_color() const;
  void _internal_set_stroke_color(const std::string& value);
  std::string* _internal_mutable_stroke_color();
  public:

  // float stroke_width = 3;
  void clear_stroke_width();
  float stroke_width() const;
  void set_stroke_width(float value);
  private:
  float _internal_stroke_width() const;
  void _internal_set_stroke_width(float value);
  public:

  // float radius = 4;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // float text_size = 5;
  void clear_text_size();
  float text_size() const;
  void set_text_size(float value);
  private:
  float _internal_text_size() const;
  void _internal_set_text_size(float value);
  public:

  // float text_rotation = 6;
  void clear_text_rotation();
  float text_rotation() const;
  void set_text_rotation(float value);
  private:
  float _internal_text_rotation() const;
  void _internal_set_text_rotation(float value);
  public:

  // .xviz.TextAnchor text_anchor = 7;
  void clear_text_anchor();
  ::xviz::TextAnchor text_anchor() const;
  void set_text_anchor(::xviz::TextAnchor value);
  private:
  ::xviz::TextAnchor _internal_text_anchor() const;
  void _internal_set_text_anchor(::xviz::TextAnchor value);
  public:

  // .xviz.TextAlignmentBaseline text_baseline = 8;
  void clear_text_baseline();
  ::xviz::TextAlignmentBaseline text_baseline() const;
  void set_text_baseline(::xviz::TextAlignmentBaseline value);
  private:
  ::xviz::TextAlignmentBaseline _internal_text_baseline() const;
  void _internal_set_text_baseline(::xviz::TextAlignmentBaseline value);
  public:

  // float height = 9;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:xviz.StyleObjectValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fill_color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stroke_color_;
  float stroke_width_;
  float radius_;
  float text_size_;
  float text_rotation_;
  int text_anchor_;
  int text_baseline_;
  float height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_style_2eproto;
};
// -------------------------------------------------------------------

class StyleStreamValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.StyleStreamValue) */ {
 public:
  StyleStreamValue();
  virtual ~StyleStreamValue();

  StyleStreamValue(const StyleStreamValue& from);
  StyleStreamValue(StyleStreamValue&& from) noexcept
    : StyleStreamValue() {
    *this = ::std::move(from);
  }

  inline StyleStreamValue& operator=(const StyleStreamValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleStreamValue& operator=(StyleStreamValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StyleStreamValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StyleStreamValue* internal_default_instance() {
    return reinterpret_cast<const StyleStreamValue*>(
               &_StyleStreamValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StyleStreamValue& a, StyleStreamValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleStreamValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StyleStreamValue* New() const final {
    return CreateMaybeMessage<StyleStreamValue>(nullptr);
  }

  StyleStreamValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StyleStreamValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StyleStreamValue& from);
  void MergeFrom(const StyleStreamValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleStreamValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.StyleStreamValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_style_2eproto);
    return ::descriptor_table_style_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointColorDomainFieldNumber = 22,
    kFillColorFieldNumber = 1,
    kStrokeColorFieldNumber = 2,
    kFontFamilyFieldNumber = 20,
    kStrokeWidthFieldNumber = 3,
    kRadiusFieldNumber = 4,
    kTextSizeFieldNumber = 5,
    kTextRotationFieldNumber = 6,
    kTextAnchorFieldNumber = 7,
    kTextBaselineFieldNumber = 8,
    kHeightFieldNumber = 9,
    kRadiusMinPixelsFieldNumber = 10,
    kRadiusMaxPixelsFieldNumber = 11,
    kStrokeWidthMinPixelsFieldNumber = 12,
    kStrokeWidthMaxPixelsFieldNumber = 13,
    kOpacityFieldNumber = 14,
    kStrokedFieldNumber = 15,
    kFilledFieldNumber = 16,
    kExtrudedFieldNumber = 17,
    kRadiusPixelsFieldNumber = 18,
    kFontWeightFieldNumber = 19,
    kPointColorModeFieldNumber = 21,
  };
  // repeated float point_color_domain = 22;
  int point_color_domain_size() const;
  private:
  int _internal_point_color_domain_size() const;
  public:
  void clear_point_color_domain();
  private:
  float _internal_point_color_domain(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_point_color_domain() const;
  void _internal_add_point_color_domain(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_point_color_domain();
  public:
  float point_color_domain(int index) const;
  void set_point_color_domain(int index, float value);
  void add_point_color_domain(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      point_color_domain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_point_color_domain();

  // string fill_color = 1;
  void clear_fill_color();
  const std::string& fill_color() const;
  void set_fill_color(const std::string& value);
  void set_fill_color(std::string&& value);
  void set_fill_color(const char* value);
  void set_fill_color(const char* value, size_t size);
  std::string* mutable_fill_color();
  std::string* release_fill_color();
  void set_allocated_fill_color(std::string* fill_color);
  private:
  const std::string& _internal_fill_color() const;
  void _internal_set_fill_color(const std::string& value);
  std::string* _internal_mutable_fill_color();
  public:

  // string stroke_color = 2;
  void clear_stroke_color();
  const std::string& stroke_color() const;
  void set_stroke_color(const std::string& value);
  void set_stroke_color(std::string&& value);
  void set_stroke_color(const char* value);
  void set_stroke_color(const char* value, size_t size);
  std::string* mutable_stroke_color();
  std::string* release_stroke_color();
  void set_allocated_stroke_color(std::string* stroke_color);
  private:
  const std::string& _internal_stroke_color() const;
  void _internal_set_stroke_color(const std::string& value);
  std::string* _internal_mutable_stroke_color();
  public:

  // string font_family = 20;
  void clear_font_family();
  const std::string& font_family() const;
  void set_font_family(const std::string& value);
  void set_font_family(std::string&& value);
  void set_font_family(const char* value);
  void set_font_family(const char* value, size_t size);
  std::string* mutable_font_family();
  std::string* release_font_family();
  void set_allocated_font_family(std::string* font_family);
  private:
  const std::string& _internal_font_family() const;
  void _internal_set_font_family(const std::string& value);
  std::string* _internal_mutable_font_family();
  public:

  // float stroke_width = 3;
  void clear_stroke_width();
  float stroke_width() const;
  void set_stroke_width(float value);
  private:
  float _internal_stroke_width() const;
  void _internal_set_stroke_width(float value);
  public:

  // float radius = 4;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // float text_size = 5;
  void clear_text_size();
  float text_size() const;
  void set_text_size(float value);
  private:
  float _internal_text_size() const;
  void _internal_set_text_size(float value);
  public:

  // float text_rotation = 6;
  void clear_text_rotation();
  float text_rotation() const;
  void set_text_rotation(float value);
  private:
  float _internal_text_rotation() const;
  void _internal_set_text_rotation(float value);
  public:

  // .xviz.TextAnchor text_anchor = 7;
  void clear_text_anchor();
  ::xviz::TextAnchor text_anchor() const;
  void set_text_anchor(::xviz::TextAnchor value);
  private:
  ::xviz::TextAnchor _internal_text_anchor() const;
  void _internal_set_text_anchor(::xviz::TextAnchor value);
  public:

  // .xviz.TextAlignmentBaseline text_baseline = 8;
  void clear_text_baseline();
  ::xviz::TextAlignmentBaseline text_baseline() const;
  void set_text_baseline(::xviz::TextAlignmentBaseline value);
  private:
  ::xviz::TextAlignmentBaseline _internal_text_baseline() const;
  void _internal_set_text_baseline(::xviz::TextAlignmentBaseline value);
  public:

  // float height = 9;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // uint32 radius_min_pixels = 10;
  void clear_radius_min_pixels();
  ::PROTOBUF_NAMESPACE_ID::uint32 radius_min_pixels() const;
  void set_radius_min_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_radius_min_pixels() const;
  void _internal_set_radius_min_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 radius_max_pixels = 11;
  void clear_radius_max_pixels();
  ::PROTOBUF_NAMESPACE_ID::uint32 radius_max_pixels() const;
  void set_radius_max_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_radius_max_pixels() const;
  void _internal_set_radius_max_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stroke_width_min_pixels = 12;
  void clear_stroke_width_min_pixels();
  ::PROTOBUF_NAMESPACE_ID::uint32 stroke_width_min_pixels() const;
  void set_stroke_width_min_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stroke_width_min_pixels() const;
  void _internal_set_stroke_width_min_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stroke_width_max_pixels = 13;
  void clear_stroke_width_max_pixels();
  ::PROTOBUF_NAMESPACE_ID::uint32 stroke_width_max_pixels() const;
  void set_stroke_width_max_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stroke_width_max_pixels() const;
  void _internal_set_stroke_width_max_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float opacity = 14;
  void clear_opacity();
  float opacity() const;
  void set_opacity(float value);
  private:
  float _internal_opacity() const;
  void _internal_set_opacity(float value);
  public:

  // bool stroked = 15;
  void clear_stroked();
  bool stroked() const;
  void set_stroked(bool value);
  private:
  bool _internal_stroked() const;
  void _internal_set_stroked(bool value);
  public:

  // bool filled = 16;
  void clear_filled();
  bool filled() const;
  void set_filled(bool value);
  private:
  bool _internal_filled() const;
  void _internal_set_filled(bool value);
  public:

  // bool extruded = 17;
  void clear_extruded();
  bool extruded() const;
  void set_extruded(bool value);
  private:
  bool _internal_extruded() const;
  void _internal_set_extruded(bool value);
  public:

  // uint32 radius_pixels = 18;
  void clear_radius_pixels();
  ::PROTOBUF_NAMESPACE_ID::uint32 radius_pixels() const;
  void set_radius_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_radius_pixels() const;
  void _internal_set_radius_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 font_weight = 19;
  void clear_font_weight();
  ::PROTOBUF_NAMESPACE_ID::uint32 font_weight() const;
  void set_font_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_font_weight() const;
  void _internal_set_font_weight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .xviz.PointColorMode point_color_mode = 21;
  void clear_point_color_mode();
  ::xviz::PointColorMode point_color_mode() const;
  void set_point_color_mode(::xviz::PointColorMode value);
  private:
  ::xviz::PointColorMode _internal_point_color_mode() const;
  void _internal_set_point_color_mode(::xviz::PointColorMode value);
  public:

  // @@protoc_insertion_point(class_scope:xviz.StyleStreamValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > point_color_domain_;
  mutable std::atomic<int> _point_color_domain_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fill_color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stroke_color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr font_family_;
  float stroke_width_;
  float radius_;
  float text_size_;
  float text_rotation_;
  int text_anchor_;
  int text_baseline_;
  float height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 radius_min_pixels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 radius_max_pixels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stroke_width_min_pixels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stroke_width_max_pixels_;
  float opacity_;
  bool stroked_;
  bool filled_;
  bool extruded_;
  ::PROTOBUF_NAMESPACE_ID::uint32 radius_pixels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 font_weight_;
  int point_color_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_style_2eproto;
};
// -------------------------------------------------------------------

class Color :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xviz.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xviz.Color";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_style_2eproto);
    return ::descriptor_table_style_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // bytes values = 1;
  void clear_values();
  const std::string& values() const;
  void set_values(const std::string& value);
  void set_values(std::string&& value);
  void set_values(const char* value);
  void set_values(const void* value, size_t size);
  std::string* mutable_values();
  std::string* release_values();
  void set_allocated_values(std::string* values);
  private:
  const std::string& _internal_values() const;
  void _internal_set_values(const std::string& value);
  std::string* _internal_mutable_values();
  public:

  // @@protoc_insertion_point(class_scope:xviz.Color)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_style_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StyleClass

// string name = 1;
inline void StyleClass::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StyleClass::name() const {
  // @@protoc_insertion_point(field_get:xviz.StyleClass.name)
  return _internal_name();
}
inline void StyleClass::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:xviz.StyleClass.name)
}
inline std::string* StyleClass::mutable_name() {
  // @@protoc_insertion_point(field_mutable:xviz.StyleClass.name)
  return _internal_mutable_name();
}
inline const std::string& StyleClass::_internal_name() const {
  return name_.GetNoArena();
}
inline void StyleClass::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StyleClass::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StyleClass.name)
}
inline void StyleClass::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleClass.name)
}
inline void StyleClass::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleClass.name)
}
inline std::string* StyleClass::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StyleClass::release_name() {
  // @@protoc_insertion_point(field_release:xviz.StyleClass.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StyleClass::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleClass.name)
}

// .xviz.StyleObjectValue style = 2;
inline bool StyleClass::_internal_has_style() const {
  return this != internal_default_instance() && style_ != nullptr;
}
inline bool StyleClass::has_style() const {
  return _internal_has_style();
}
inline void StyleClass::clear_style() {
  if (GetArenaNoVirtual() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
}
inline const ::xviz::StyleObjectValue& StyleClass::_internal_style() const {
  const ::xviz::StyleObjectValue* p = style_;
  return p != nullptr ? *p : *reinterpret_cast<const ::xviz::StyleObjectValue*>(
      &::xviz::_StyleObjectValue_default_instance_);
}
inline const ::xviz::StyleObjectValue& StyleClass::style() const {
  // @@protoc_insertion_point(field_get:xviz.StyleClass.style)
  return _internal_style();
}
inline ::xviz::StyleObjectValue* StyleClass::release_style() {
  // @@protoc_insertion_point(field_release:xviz.StyleClass.style)
  
  ::xviz::StyleObjectValue* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::xviz::StyleObjectValue* StyleClass::_internal_mutable_style() {
  
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::xviz::StyleObjectValue>(GetArenaNoVirtual());
    style_ = p;
  }
  return style_;
}
inline ::xviz::StyleObjectValue* StyleClass::mutable_style() {
  // @@protoc_insertion_point(field_mutable:xviz.StyleClass.style)
  return _internal_mutable_style();
}
inline void StyleClass::set_allocated_style(::xviz::StyleObjectValue* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete style_;
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    
  } else {
    
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleClass.style)
}

// -------------------------------------------------------------------

// StyleObjectValue

// string fill_color = 1;
inline void StyleObjectValue::clear_fill_color() {
  fill_color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StyleObjectValue::fill_color() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.fill_color)
  return _internal_fill_color();
}
inline void StyleObjectValue::set_fill_color(const std::string& value) {
  _internal_set_fill_color(value);
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.fill_color)
}
inline std::string* StyleObjectValue::mutable_fill_color() {
  // @@protoc_insertion_point(field_mutable:xviz.StyleObjectValue.fill_color)
  return _internal_mutable_fill_color();
}
inline const std::string& StyleObjectValue::_internal_fill_color() const {
  return fill_color_.GetNoArena();
}
inline void StyleObjectValue::_internal_set_fill_color(const std::string& value) {
  
  fill_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StyleObjectValue::set_fill_color(std::string&& value) {
  
  fill_color_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StyleObjectValue.fill_color)
}
inline void StyleObjectValue::set_fill_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fill_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleObjectValue.fill_color)
}
inline void StyleObjectValue::set_fill_color(const char* value, size_t size) {
  
  fill_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleObjectValue.fill_color)
}
inline std::string* StyleObjectValue::_internal_mutable_fill_color() {
  
  return fill_color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StyleObjectValue::release_fill_color() {
  // @@protoc_insertion_point(field_release:xviz.StyleObjectValue.fill_color)
  
  return fill_color_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StyleObjectValue::set_allocated_fill_color(std::string* fill_color) {
  if (fill_color != nullptr) {
    
  } else {
    
  }
  fill_color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fill_color);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleObjectValue.fill_color)
}

// string stroke_color = 2;
inline void StyleObjectValue::clear_stroke_color() {
  stroke_color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StyleObjectValue::stroke_color() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.stroke_color)
  return _internal_stroke_color();
}
inline void StyleObjectValue::set_stroke_color(const std::string& value) {
  _internal_set_stroke_color(value);
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.stroke_color)
}
inline std::string* StyleObjectValue::mutable_stroke_color() {
  // @@protoc_insertion_point(field_mutable:xviz.StyleObjectValue.stroke_color)
  return _internal_mutable_stroke_color();
}
inline const std::string& StyleObjectValue::_internal_stroke_color() const {
  return stroke_color_.GetNoArena();
}
inline void StyleObjectValue::_internal_set_stroke_color(const std::string& value) {
  
  stroke_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StyleObjectValue::set_stroke_color(std::string&& value) {
  
  stroke_color_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StyleObjectValue.stroke_color)
}
inline void StyleObjectValue::set_stroke_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stroke_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleObjectValue.stroke_color)
}
inline void StyleObjectValue::set_stroke_color(const char* value, size_t size) {
  
  stroke_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleObjectValue.stroke_color)
}
inline std::string* StyleObjectValue::_internal_mutable_stroke_color() {
  
  return stroke_color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StyleObjectValue::release_stroke_color() {
  // @@protoc_insertion_point(field_release:xviz.StyleObjectValue.stroke_color)
  
  return stroke_color_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StyleObjectValue::set_allocated_stroke_color(std::string* stroke_color) {
  if (stroke_color != nullptr) {
    
  } else {
    
  }
  stroke_color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stroke_color);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleObjectValue.stroke_color)
}

// float stroke_width = 3;
inline void StyleObjectValue::clear_stroke_width() {
  stroke_width_ = 0;
}
inline float StyleObjectValue::_internal_stroke_width() const {
  return stroke_width_;
}
inline float StyleObjectValue::stroke_width() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.stroke_width)
  return _internal_stroke_width();
}
inline void StyleObjectValue::_internal_set_stroke_width(float value) {
  
  stroke_width_ = value;
}
inline void StyleObjectValue::set_stroke_width(float value) {
  _internal_set_stroke_width(value);
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.stroke_width)
}

// float radius = 4;
inline void StyleObjectValue::clear_radius() {
  radius_ = 0;
}
inline float StyleObjectValue::_internal_radius() const {
  return radius_;
}
inline float StyleObjectValue::radius() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.radius)
  return _internal_radius();
}
inline void StyleObjectValue::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void StyleObjectValue::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.radius)
}

// float text_size = 5;
inline void StyleObjectValue::clear_text_size() {
  text_size_ = 0;
}
inline float StyleObjectValue::_internal_text_size() const {
  return text_size_;
}
inline float StyleObjectValue::text_size() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.text_size)
  return _internal_text_size();
}
inline void StyleObjectValue::_internal_set_text_size(float value) {
  
  text_size_ = value;
}
inline void StyleObjectValue::set_text_size(float value) {
  _internal_set_text_size(value);
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.text_size)
}

// float text_rotation = 6;
inline void StyleObjectValue::clear_text_rotation() {
  text_rotation_ = 0;
}
inline float StyleObjectValue::_internal_text_rotation() const {
  return text_rotation_;
}
inline float StyleObjectValue::text_rotation() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.text_rotation)
  return _internal_text_rotation();
}
inline void StyleObjectValue::_internal_set_text_rotation(float value) {
  
  text_rotation_ = value;
}
inline void StyleObjectValue::set_text_rotation(float value) {
  _internal_set_text_rotation(value);
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.text_rotation)
}

// .xviz.TextAnchor text_anchor = 7;
inline void StyleObjectValue::clear_text_anchor() {
  text_anchor_ = 0;
}
inline ::xviz::TextAnchor StyleObjectValue::_internal_text_anchor() const {
  return static_cast< ::xviz::TextAnchor >(text_anchor_);
}
inline ::xviz::TextAnchor StyleObjectValue::text_anchor() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.text_anchor)
  return _internal_text_anchor();
}
inline void StyleObjectValue::_internal_set_text_anchor(::xviz::TextAnchor value) {
  
  text_anchor_ = value;
}
inline void StyleObjectValue::set_text_anchor(::xviz::TextAnchor value) {
  _internal_set_text_anchor(value);
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.text_anchor)
}

// .xviz.TextAlignmentBaseline text_baseline = 8;
inline void StyleObjectValue::clear_text_baseline() {
  text_baseline_ = 0;
}
inline ::xviz::TextAlignmentBaseline StyleObjectValue::_internal_text_baseline() const {
  return static_cast< ::xviz::TextAlignmentBaseline >(text_baseline_);
}
inline ::xviz::TextAlignmentBaseline StyleObjectValue::text_baseline() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.text_baseline)
  return _internal_text_baseline();
}
inline void StyleObjectValue::_internal_set_text_baseline(::xviz::TextAlignmentBaseline value) {
  
  text_baseline_ = value;
}
inline void StyleObjectValue::set_text_baseline(::xviz::TextAlignmentBaseline value) {
  _internal_set_text_baseline(value);
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.text_baseline)
}

// float height = 9;
inline void StyleObjectValue::clear_height() {
  height_ = 0;
}
inline float StyleObjectValue::_internal_height() const {
  return height_;
}
inline float StyleObjectValue::height() const {
  // @@protoc_insertion_point(field_get:xviz.StyleObjectValue.height)
  return _internal_height();
}
inline void StyleObjectValue::_internal_set_height(float value) {
  
  height_ = value;
}
inline void StyleObjectValue::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:xviz.StyleObjectValue.height)
}

// -------------------------------------------------------------------

// StyleStreamValue

// string fill_color = 1;
inline void StyleStreamValue::clear_fill_color() {
  fill_color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StyleStreamValue::fill_color() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.fill_color)
  return _internal_fill_color();
}
inline void StyleStreamValue::set_fill_color(const std::string& value) {
  _internal_set_fill_color(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.fill_color)
}
inline std::string* StyleStreamValue::mutable_fill_color() {
  // @@protoc_insertion_point(field_mutable:xviz.StyleStreamValue.fill_color)
  return _internal_mutable_fill_color();
}
inline const std::string& StyleStreamValue::_internal_fill_color() const {
  return fill_color_.GetNoArena();
}
inline void StyleStreamValue::_internal_set_fill_color(const std::string& value) {
  
  fill_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StyleStreamValue::set_fill_color(std::string&& value) {
  
  fill_color_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StyleStreamValue.fill_color)
}
inline void StyleStreamValue::set_fill_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fill_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleStreamValue.fill_color)
}
inline void StyleStreamValue::set_fill_color(const char* value, size_t size) {
  
  fill_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleStreamValue.fill_color)
}
inline std::string* StyleStreamValue::_internal_mutable_fill_color() {
  
  return fill_color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StyleStreamValue::release_fill_color() {
  // @@protoc_insertion_point(field_release:xviz.StyleStreamValue.fill_color)
  
  return fill_color_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StyleStreamValue::set_allocated_fill_color(std::string* fill_color) {
  if (fill_color != nullptr) {
    
  } else {
    
  }
  fill_color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fill_color);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleStreamValue.fill_color)
}

// string stroke_color = 2;
inline void StyleStreamValue::clear_stroke_color() {
  stroke_color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StyleStreamValue::stroke_color() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroke_color)
  return _internal_stroke_color();
}
inline void StyleStreamValue::set_stroke_color(const std::string& value) {
  _internal_set_stroke_color(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroke_color)
}
inline std::string* StyleStreamValue::mutable_stroke_color() {
  // @@protoc_insertion_point(field_mutable:xviz.StyleStreamValue.stroke_color)
  return _internal_mutable_stroke_color();
}
inline const std::string& StyleStreamValue::_internal_stroke_color() const {
  return stroke_color_.GetNoArena();
}
inline void StyleStreamValue::_internal_set_stroke_color(const std::string& value) {
  
  stroke_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StyleStreamValue::set_stroke_color(std::string&& value) {
  
  stroke_color_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StyleStreamValue.stroke_color)
}
inline void StyleStreamValue::set_stroke_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stroke_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleStreamValue.stroke_color)
}
inline void StyleStreamValue::set_stroke_color(const char* value, size_t size) {
  
  stroke_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleStreamValue.stroke_color)
}
inline std::string* StyleStreamValue::_internal_mutable_stroke_color() {
  
  return stroke_color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StyleStreamValue::release_stroke_color() {
  // @@protoc_insertion_point(field_release:xviz.StyleStreamValue.stroke_color)
  
  return stroke_color_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StyleStreamValue::set_allocated_stroke_color(std::string* stroke_color) {
  if (stroke_color != nullptr) {
    
  } else {
    
  }
  stroke_color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stroke_color);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleStreamValue.stroke_color)
}

// float stroke_width = 3;
inline void StyleStreamValue::clear_stroke_width() {
  stroke_width_ = 0;
}
inline float StyleStreamValue::_internal_stroke_width() const {
  return stroke_width_;
}
inline float StyleStreamValue::stroke_width() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroke_width)
  return _internal_stroke_width();
}
inline void StyleStreamValue::_internal_set_stroke_width(float value) {
  
  stroke_width_ = value;
}
inline void StyleStreamValue::set_stroke_width(float value) {
  _internal_set_stroke_width(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroke_width)
}

// float radius = 4;
inline void StyleStreamValue::clear_radius() {
  radius_ = 0;
}
inline float StyleStreamValue::_internal_radius() const {
  return radius_;
}
inline float StyleStreamValue::radius() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.radius)
  return _internal_radius();
}
inline void StyleStreamValue::_internal_set_radius(float value) {
  
  radius_ = value;
}
inline void StyleStreamValue::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.radius)
}

// float text_size = 5;
inline void StyleStreamValue::clear_text_size() {
  text_size_ = 0;
}
inline float StyleStreamValue::_internal_text_size() const {
  return text_size_;
}
inline float StyleStreamValue::text_size() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.text_size)
  return _internal_text_size();
}
inline void StyleStreamValue::_internal_set_text_size(float value) {
  
  text_size_ = value;
}
inline void StyleStreamValue::set_text_size(float value) {
  _internal_set_text_size(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.text_size)
}

// float text_rotation = 6;
inline void StyleStreamValue::clear_text_rotation() {
  text_rotation_ = 0;
}
inline float StyleStreamValue::_internal_text_rotation() const {
  return text_rotation_;
}
inline float StyleStreamValue::text_rotation() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.text_rotation)
  return _internal_text_rotation();
}
inline void StyleStreamValue::_internal_set_text_rotation(float value) {
  
  text_rotation_ = value;
}
inline void StyleStreamValue::set_text_rotation(float value) {
  _internal_set_text_rotation(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.text_rotation)
}

// .xviz.TextAnchor text_anchor = 7;
inline void StyleStreamValue::clear_text_anchor() {
  text_anchor_ = 0;
}
inline ::xviz::TextAnchor StyleStreamValue::_internal_text_anchor() const {
  return static_cast< ::xviz::TextAnchor >(text_anchor_);
}
inline ::xviz::TextAnchor StyleStreamValue::text_anchor() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.text_anchor)
  return _internal_text_anchor();
}
inline void StyleStreamValue::_internal_set_text_anchor(::xviz::TextAnchor value) {
  
  text_anchor_ = value;
}
inline void StyleStreamValue::set_text_anchor(::xviz::TextAnchor value) {
  _internal_set_text_anchor(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.text_anchor)
}

// .xviz.TextAlignmentBaseline text_baseline = 8;
inline void StyleStreamValue::clear_text_baseline() {
  text_baseline_ = 0;
}
inline ::xviz::TextAlignmentBaseline StyleStreamValue::_internal_text_baseline() const {
  return static_cast< ::xviz::TextAlignmentBaseline >(text_baseline_);
}
inline ::xviz::TextAlignmentBaseline StyleStreamValue::text_baseline() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.text_baseline)
  return _internal_text_baseline();
}
inline void StyleStreamValue::_internal_set_text_baseline(::xviz::TextAlignmentBaseline value) {
  
  text_baseline_ = value;
}
inline void StyleStreamValue::set_text_baseline(::xviz::TextAlignmentBaseline value) {
  _internal_set_text_baseline(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.text_baseline)
}

// float height = 9;
inline void StyleStreamValue::clear_height() {
  height_ = 0;
}
inline float StyleStreamValue::_internal_height() const {
  return height_;
}
inline float StyleStreamValue::height() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.height)
  return _internal_height();
}
inline void StyleStreamValue::_internal_set_height(float value) {
  
  height_ = value;
}
inline void StyleStreamValue::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.height)
}

// uint32 radius_min_pixels = 10;
inline void StyleStreamValue::clear_radius_min_pixels() {
  radius_min_pixels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleStreamValue::_internal_radius_min_pixels() const {
  return radius_min_pixels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleStreamValue::radius_min_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.radius_min_pixels)
  return _internal_radius_min_pixels();
}
inline void StyleStreamValue::_internal_set_radius_min_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  radius_min_pixels_ = value;
}
inline void StyleStreamValue::set_radius_min_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_radius_min_pixels(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.radius_min_pixels)
}

// uint32 radius_max_pixels = 11;
inline void StyleStreamValue::clear_radius_max_pixels() {
  radius_max_pixels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleStreamValue::_internal_radius_max_pixels() const {
  return radius_max_pixels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleStreamValue::radius_max_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.radius_max_pixels)
  return _internal_radius_max_pixels();
}
inline void StyleStreamValue::_internal_set_radius_max_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  radius_max_pixels_ = value;
}
inline void StyleStreamValue::set_radius_max_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_radius_max_pixels(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.radius_max_pixels)
}

// uint32 stroke_width_min_pixels = 12;
inline void StyleStreamValue::clear_stroke_width_min_pixels() {
  stroke_width_min_pixels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleStreamValue::_internal_stroke_width_min_pixels() const {
  return stroke_width_min_pixels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleStreamValue::stroke_width_min_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroke_width_min_pixels)
  return _internal_stroke_width_min_pixels();
}
inline void StyleStreamValue::_internal_set_stroke_width_min_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stroke_width_min_pixels_ = value;
}
inline void StyleStreamValue::set_stroke_width_min_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stroke_width_min_pixels(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroke_width_min_pixels)
}

// uint32 stroke_width_max_pixels = 13;
inline void StyleStreamValue::clear_stroke_width_max_pixels() {
  stroke_width_max_pixels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleStreamValue::_internal_stroke_width_max_pixels() const {
  return stroke_width_max_pixels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleStreamValue::stroke_width_max_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroke_width_max_pixels)
  return _internal_stroke_width_max_pixels();
}
inline void StyleStreamValue::_internal_set_stroke_width_max_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stroke_width_max_pixels_ = value;
}
inline void StyleStreamValue::set_stroke_width_max_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stroke_width_max_pixels(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroke_width_max_pixels)
}

// float opacity = 14;
inline void StyleStreamValue::clear_opacity() {
  opacity_ = 0;
}
inline float StyleStreamValue::_internal_opacity() const {
  return opacity_;
}
inline float StyleStreamValue::opacity() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.opacity)
  return _internal_opacity();
}
inline void StyleStreamValue::_internal_set_opacity(float value) {
  
  opacity_ = value;
}
inline void StyleStreamValue::set_opacity(float value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.opacity)
}

// bool stroked = 15;
inline void StyleStreamValue::clear_stroked() {
  stroked_ = false;
}
inline bool StyleStreamValue::_internal_stroked() const {
  return stroked_;
}
inline bool StyleStreamValue::stroked() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.stroked)
  return _internal_stroked();
}
inline void StyleStreamValue::_internal_set_stroked(bool value) {
  
  stroked_ = value;
}
inline void StyleStreamValue::set_stroked(bool value) {
  _internal_set_stroked(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.stroked)
}

// bool filled = 16;
inline void StyleStreamValue::clear_filled() {
  filled_ = false;
}
inline bool StyleStreamValue::_internal_filled() const {
  return filled_;
}
inline bool StyleStreamValue::filled() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.filled)
  return _internal_filled();
}
inline void StyleStreamValue::_internal_set_filled(bool value) {
  
  filled_ = value;
}
inline void StyleStreamValue::set_filled(bool value) {
  _internal_set_filled(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.filled)
}

// bool extruded = 17;
inline void StyleStreamValue::clear_extruded() {
  extruded_ = false;
}
inline bool StyleStreamValue::_internal_extruded() const {
  return extruded_;
}
inline bool StyleStreamValue::extruded() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.extruded)
  return _internal_extruded();
}
inline void StyleStreamValue::_internal_set_extruded(bool value) {
  
  extruded_ = value;
}
inline void StyleStreamValue::set_extruded(bool value) {
  _internal_set_extruded(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.extruded)
}

// uint32 radius_pixels = 18;
inline void StyleStreamValue::clear_radius_pixels() {
  radius_pixels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleStreamValue::_internal_radius_pixels() const {
  return radius_pixels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleStreamValue::radius_pixels() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.radius_pixels)
  return _internal_radius_pixels();
}
inline void StyleStreamValue::_internal_set_radius_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  radius_pixels_ = value;
}
inline void StyleStreamValue::set_radius_pixels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_radius_pixels(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.radius_pixels)
}

// uint32 font_weight = 19;
inline void StyleStreamValue::clear_font_weight() {
  font_weight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleStreamValue::_internal_font_weight() const {
  return font_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StyleStreamValue::font_weight() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.font_weight)
  return _internal_font_weight();
}
inline void StyleStreamValue::_internal_set_font_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  font_weight_ = value;
}
inline void StyleStreamValue::set_font_weight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_font_weight(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.font_weight)
}

// string font_family = 20;
inline void StyleStreamValue::clear_font_family() {
  font_family_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StyleStreamValue::font_family() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.font_family)
  return _internal_font_family();
}
inline void StyleStreamValue::set_font_family(const std::string& value) {
  _internal_set_font_family(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.font_family)
}
inline std::string* StyleStreamValue::mutable_font_family() {
  // @@protoc_insertion_point(field_mutable:xviz.StyleStreamValue.font_family)
  return _internal_mutable_font_family();
}
inline const std::string& StyleStreamValue::_internal_font_family() const {
  return font_family_.GetNoArena();
}
inline void StyleStreamValue::_internal_set_font_family(const std::string& value) {
  
  font_family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StyleStreamValue::set_font_family(std::string&& value) {
  
  font_family_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.StyleStreamValue.font_family)
}
inline void StyleStreamValue::set_font_family(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  font_family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.StyleStreamValue.font_family)
}
inline void StyleStreamValue::set_font_family(const char* value, size_t size) {
  
  font_family_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.StyleStreamValue.font_family)
}
inline std::string* StyleStreamValue::_internal_mutable_font_family() {
  
  return font_family_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StyleStreamValue::release_font_family() {
  // @@protoc_insertion_point(field_release:xviz.StyleStreamValue.font_family)
  
  return font_family_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StyleStreamValue::set_allocated_font_family(std::string* font_family) {
  if (font_family != nullptr) {
    
  } else {
    
  }
  font_family_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), font_family);
  // @@protoc_insertion_point(field_set_allocated:xviz.StyleStreamValue.font_family)
}

// .xviz.PointColorMode point_color_mode = 21;
inline void StyleStreamValue::clear_point_color_mode() {
  point_color_mode_ = 0;
}
inline ::xviz::PointColorMode StyleStreamValue::_internal_point_color_mode() const {
  return static_cast< ::xviz::PointColorMode >(point_color_mode_);
}
inline ::xviz::PointColorMode StyleStreamValue::point_color_mode() const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.point_color_mode)
  return _internal_point_color_mode();
}
inline void StyleStreamValue::_internal_set_point_color_mode(::xviz::PointColorMode value) {
  
  point_color_mode_ = value;
}
inline void StyleStreamValue::set_point_color_mode(::xviz::PointColorMode value) {
  _internal_set_point_color_mode(value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.point_color_mode)
}

// repeated float point_color_domain = 22;
inline int StyleStreamValue::_internal_point_color_domain_size() const {
  return point_color_domain_.size();
}
inline int StyleStreamValue::point_color_domain_size() const {
  return _internal_point_color_domain_size();
}
inline void StyleStreamValue::clear_point_color_domain() {
  point_color_domain_.Clear();
}
inline float StyleStreamValue::_internal_point_color_domain(int index) const {
  return point_color_domain_.Get(index);
}
inline float StyleStreamValue::point_color_domain(int index) const {
  // @@protoc_insertion_point(field_get:xviz.StyleStreamValue.point_color_domain)
  return _internal_point_color_domain(index);
}
inline void StyleStreamValue::set_point_color_domain(int index, float value) {
  point_color_domain_.Set(index, value);
  // @@protoc_insertion_point(field_set:xviz.StyleStreamValue.point_color_domain)
}
inline void StyleStreamValue::_internal_add_point_color_domain(float value) {
  point_color_domain_.Add(value);
}
inline void StyleStreamValue::add_point_color_domain(float value) {
  _internal_add_point_color_domain(value);
  // @@protoc_insertion_point(field_add:xviz.StyleStreamValue.point_color_domain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
StyleStreamValue::_internal_point_color_domain() const {
  return point_color_domain_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
StyleStreamValue::point_color_domain() const {
  // @@protoc_insertion_point(field_list:xviz.StyleStreamValue.point_color_domain)
  return _internal_point_color_domain();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
StyleStreamValue::_internal_mutable_point_color_domain() {
  return &point_color_domain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
StyleStreamValue::mutable_point_color_domain() {
  // @@protoc_insertion_point(field_mutable_list:xviz.StyleStreamValue.point_color_domain)
  return _internal_mutable_point_color_domain();
}

// -------------------------------------------------------------------

// Color

// bytes values = 1;
inline void Color::clear_values() {
  values_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Color::values() const {
  // @@protoc_insertion_point(field_get:xviz.Color.values)
  return _internal_values();
}
inline void Color::set_values(const std::string& value) {
  _internal_set_values(value);
  // @@protoc_insertion_point(field_set:xviz.Color.values)
}
inline std::string* Color::mutable_values() {
  // @@protoc_insertion_point(field_mutable:xviz.Color.values)
  return _internal_mutable_values();
}
inline const std::string& Color::_internal_values() const {
  return values_.GetNoArena();
}
inline void Color::_internal_set_values(const std::string& value) {
  
  values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Color::set_values(std::string&& value) {
  
  values_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xviz.Color.values)
}
inline void Color::set_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xviz.Color.values)
}
inline void Color::set_values(const void* value, size_t size) {
  
  values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xviz.Color.values)
}
inline std::string* Color::_internal_mutable_values() {
  
  return values_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Color::release_values() {
  // @@protoc_insertion_point(field_release:xviz.Color.values)
  
  return values_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Color::set_allocated_values(std::string* values) {
  if (values != nullptr) {
    
  } else {
    
  }
  values_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), values);
  // @@protoc_insertion_point(field_set_allocated:xviz.Color.values)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xviz

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xviz::TextAnchor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::TextAnchor>() {
  return ::xviz::TextAnchor_descriptor();
}
template <> struct is_proto_enum< ::xviz::TextAlignmentBaseline> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::TextAlignmentBaseline>() {
  return ::xviz::TextAlignmentBaseline_descriptor();
}
template <> struct is_proto_enum< ::xviz::PointColorMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xviz::PointColorMode>() {
  return ::xviz::PointColorMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_style_2eproto
